name: Deploy to Amazon ECS

on:
  push:
    branches: [ feature-fluentbit-s3 ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: default
  BOT_NAME: monolithic_bot
  FLUENT_BIT_NAME: fluent-bit

jobs:
  deploy:
    if: github.event.created == false
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repositories if not exist
        run: |
          for repo in "$BOT_NAME" "$FLUENT_BIT_NAME"; do
            if ! aws ecr describe-repositories --repository-names "$repo" >/dev/null 2>&1; then
              aws ecr create-repository --repository-name "$repo"
            fi
          done

      - name: Build, tag, and push image for Python app to Amazon ECR
        id: build-bot-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$BOT_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$BOT_NAME:$IMAGE_TAG
          echo "bot_image=$ECR_REGISTRY/$BOT_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image for Fluent Bit to Amazon ECR
        id: build-fluent-bit-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.fluent-bit -t $ECR_REGISTRY/$FLUENT_BIT_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$FLUENT_BIT_NAME:$IMAGE_TAG
          echo "fluent_bit_image=$ECR_REGISTRY/$FLUENT_BIT_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Installs an ecspresso binary
        uses: kayac/ecspresso@v2

      - name: Describes default subnet for the Availability Zone
        id: describe-subnets
        run: |
          echo "subnets=$(aws ec2 describe-subnets --filters Name=default-for-az,Values=true --query Subnets[].SubnetId --output text | sed 's/\t/","/g')" >> $GITHUB_OUTPUT

      - name: Deploy to Amazon ECS
        env:
          SUBNETS: ${{ steps.describe-subnets.outputs.subnets }}
          BOT_IMAGE: ${{ steps.build-bot-image.outputs.bot_image }}
          FLUENT_BIT_IMAGE: ${{ steps.build-fluent-bit-image.outputs.fluent_bit_image }}
        run: |
          echo -e "BOT_IMAGE=$BOT_IMAGE\nFLUENT_BIT_IMAGE=$FLUENT_BIT_IMAGE\nBOT_NAME=$BOT_NAME\nFLUENT_BIT_NAME=$FLUENT_BIT_NAME" > envfile
          cat envfile
          ecspresso deploy --envfile envfile --no-wait
